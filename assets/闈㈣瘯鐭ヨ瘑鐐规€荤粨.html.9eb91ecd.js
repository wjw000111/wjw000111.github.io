import{_ as a,V as o,W as n,X as i,Y as e,$ as t,a0 as l,y as s}from"./framework.8d08e049.js";const h={},d=l('<h1 id="面试知识点总结" tabindex="-1"><a class="header-anchor" href="#面试知识点总结" aria-hidden="true">#</a> 面试知识点总结</h1><h2 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h2><ul><li><strong>根本区别</strong>：进程是操作系统资源分配的基本单位，线程是处理器任务调度和执行的基本单位。</li><li><strong>资源开销</strong>：每个进程都有自己独立的代码和数据空间，进程之间的切换开销较大；同一个进程中的线程共享进程的代码和数据空间，但是线程有独立的运行栈和程序计数器（PC），线程之间的切换开销小于进程切换。</li><li><strong>包含关系</strong>：一个进程通常有多个线程，线程是进程的一部分。</li><li><strong>内存分配</strong>：进程有自己的地址空间和资源，同一进程的线程共享进程的地址空间和资源。</li><li><strong>影响关系</strong>：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。</li><li><strong>执行过程</strong>：每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但线程不能独立执行，必须依存进程执行，进程控制线程的执行。进程和线程都可以并发。</li></ul><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>为什么程序计数器是私有的？（程序计数器的作用是控制指令读取）</p></div><h1 id="安全面经" tabindex="-1"><a class="header-anchor" href="#安全面经" aria-hidden="true">#</a> 安全面经</h1><h2 id="信息收集如何处理子域名爆破的泛解析问题" tabindex="-1"><a class="header-anchor" href="#信息收集如何处理子域名爆破的泛解析问题" aria-hidden="true">#</a> 信息收集如何处理子域名爆破的泛解析问题</h2>',6),c=i("br",null,null,-1),_={href:"https://github.com/shmilylty/OneForAll",target:"_blank",rel:"noopener noreferrer"},p=l('<h2 id="phpinfo你会关注哪些信息" tabindex="-1"><a class="header-anchor" href="#phpinfo你会关注哪些信息" aria-hidden="true">#</a> phpinfo你会关注哪些信息</h2><ol><li>php版本信息</li><li>系统信息：Linux or Windows</li><li>Loaded Configuration File(配置文件位置)：php.ini</li><li>Registered PHP Streams(支持的流)：文件包含、反序列化以及bypass</li><li>Registered Stream Filters(支持的流过滤器)：同4</li><li>allow_url_fopen &amp; allow_url_include：任意命令执行</li><li>disable_functions：命令执行</li><li>display_errors &amp; display_startup_errors</li><li>open_basedir：文件读取目录限制</li><li>short_open_tag：判断服务器是否支持短标签，shell写入</li><li>phar：配合其他函数参数可控的情况下进行反序列化操作</li><li>session配置</li><li>SERVER_ADDR：服务器地址</li><li>_SERVER[&quot;SCRIPT_FILENAME&quot;]：网站绝对路径</li><li>Gopher：SSRF</li></ol><h2 id="csrf攻击" tabindex="-1"><a class="header-anchor" href="#csrf攻击" aria-hidden="true">#</a> CSRF攻击</h2><p>利用了系统对浏览器的信任，盗用cookie绕过系统认证。<br> 防御方法：</p><ol><li>对敏感操作的接口加上验证码</li><li>token校验</li><li>校验referer</li></ol>',5);function u(f,g){const r=s("ExternalLinkIcon");return o(),n("div",null,[d,i("p",null,[e("泛域名解析：以通配符的方式把不存在的IP也解析到某个IP。"),c,e(" 解决方式：IP黑名单方式，工具"),i("a",_,[e("OneForAll"),t(r)])]),p])}const b=a(h,[["render",u],["__file","闈㈣瘯鐭ヨ瘑鐐规€荤粨.html.vue"]]);export{b as default};
